"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcnapx_trials"] = self["webpackChunkcnapx_trials"] || []).push([["src_shop_src_process_make_payment_form_js"],{

/***/ "./src/shop_src/process_make_payment_form.js":
/*!***************************************************!*\
  !*** ./src/shop_src/process_make_payment_form.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProcessMakePaymentForm: () => (/* binding */ ProcessMakePaymentForm)\n/* harmony export */ });\n/* harmony import */ var _utils_src_toast_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils_src/toast_it */ \"./src/utils_src/toast_it.js\");\n/* harmony import */ var _utils_src_random_pass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils_src/random_pass.js */ \"./src/utils_src/random_pass.js\");\n/* harmony import */ var _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../indexeddb_src/offlinedb.js */ \"./src/indexeddb_src/offlinedb.js\");\n\r\n\r\n\r\n\r\nclass ProcessMakePaymentForm\r\n{\r\n    #_mErrors;\r\n    #mErrorMsg;\r\n    #form;\r\n    #offlinedb;\r\n    #dailyTransactionDB;\r\n    #transactionDetailDB;\r\n    constructor(form)\r\n    {\r\n        this.#_mErrors = 0;\r\n        this.#mErrorMsg = '';\r\n        if(!form)\r\n        {\r\n            this.#_mErrors++;\r\n            this.#mErrorMsg = \"Invalid form submission\";\r\n        }\r\n        else if(form.grandTotal.value == '')\r\n        {\r\n            this.#_mErrors++;\r\n            this.#mErrorMsg = \"The grand total not found\";\r\n        }\r\n        else if(form['paymode'].value == '')\r\n        {\r\n            this.#_mErrors++;\r\n            this.#mErrorMsg = \"The payment method is required\";\r\n        }\r\n        else \r\n        {\r\n            this.#form = form;\r\n            this.#offlinedb = new _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_2__.OfflineDB();\r\n            this.#dailyTransactionDB = \"daily-transactions\";\r\n            this.#transactionDetailDB = \"cart\";\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * PUBLIC API OF THIS CLASS\r\n     * --------------------\r\n     *      */\r\n\r\n    validatePayment()\r\n    {\r\n        if(this.#_mErrors == 0)\r\n        {\r\n            console.log(this.#form);\r\n            let transactionId = (0,_utils_src_random_pass_js__WEBPACK_IMPORTED_MODULE_1__.generatePassword)();\r\n            let time_stamp = Date.now();\r\n            let amount = Number(this.#form.grandTotal.value);\r\n            let paymentMethod = this.#form['paymode'].value;\r\n            let cartItems = JSON.parse(localStorage.getItem('cartData'));\r\n\r\n            //Transaction\r\n            let transactionData = {\r\n                transaction_id: transactionId,\r\n                createdOn: time_stamp,\r\n                transaction_amount: amount,\r\n                payment_method: paymentMethod\r\n            };\r\n\r\n            this.#offlinedb.saveToDB(this.#dailyTransactionDB, this.#callBackFunc, transactionData);\r\n\r\n\r\n            // Transaction details\r\n            cartItems.forEach(cartItem => {\r\n                cartItem['createdOn'] = time_stamp;\r\n                cartItem['transaction_id'] = transactionId;\r\n                this.#offlinedb.saveToDB(this.#transactionDetailDB, this.#callBackFunc, cartItem);\r\n            });\r\n\r\n            //Store the transaction id is session for reciept\r\n            sessionStorage.setItem('transaction_id', transactionId);\r\n            \r\n\r\n            //After the above items are added to the DB, then show the success UI, that allows the user to either print reciept or cancel\r\n            __webpack_require__.e(/*! import() */ \"src_shop_src_transaction_completed_ui_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./transaction_completed_ui.js */ \"./src/shop_src/transaction_completed_ui.js\"))\r\n            .then(m => {\r\n                let transactionCompletedUi = new m.TransactionCompletedUi();\r\n                transactionCompletedUi.createUi();\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message);\r\n                (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_0__.toastIt)('red', 'Unable to load the transaction succesdful ui');\r\n            });\r\n\r\n            \r\n        }\r\n        else \r\n        {\r\n            (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_0__.toastIt)('red', this.#mErrorMsg);\r\n            console.log(this.#mErrorMsg);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    #callBackFunc(id)\r\n    {\r\n        console.log(id);\r\n        (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_0__.toastIt)('green', 'Added success id '+id);\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/shop_src/process_make_payment_form.js?");

/***/ }),

/***/ "./src/utils_src/random_pass.js":
/*!**************************************!*\
  !*** ./src/utils_src/random_pass.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePassword: () => (/* binding */ generatePassword),\n/* harmony export */   generateShortPassword: () => (/* binding */ generateShortPassword)\n/* harmony export */ });\n\r\nfunction generatePassword()\r\n{\r\n    const passwordLength = 12;\r\n    const includeLowerCase = true;\r\n    const includeUpperCase = true;\r\n    const includeSymbols = true;\r\n    const includeNumbers = true;\r\n\r\n    const lowerCaseChars = `abcdefgjijklmnopqrstuvwxyz`;\r\n    const upperCaseChars = `ABCDEFGHIJKLMNOPQRSTUVWXYZ`;\r\n    const numberChars = `0123456789`;\r\n    const symbolChars = `'@#$%^&*()|?_=+-`;\r\n\r\n    let allowedChars = ``;\r\n    let password = ``;\r\n\r\n    allowedChars += includeLowerCase ? lowerCaseChars : ``;\r\n    allowedChars += includeUpperCase ? upperCaseChars : ``;\r\n    allowedChars += includeSymbols ? symbolChars : ``;\r\n    allowedChars += includeNumbers ? numberChars : ``;\r\n\r\n    if(passwordLength <= 0)\r\n        return `(Password length must be at least one)`;\r\n    \r\n\r\n    if(allowedChars.length === 0)\r\n        return `(At least one set of characters need to be selected)`;\r\n    \r\n\r\n    for(let i = 0; i < passwordLength; i++)\r\n    {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        password += allowedChars[randomIndex];\r\n    }\r\n    \r\n    return `${password}`;\r\n}\r\n\r\n\r\n\r\nfunction generateShortPassword()\r\n{\r\n    const passwordLength = 6;\r\n    const includeLowerCase = true;\r\n    const includeUpperCase = true;\r\n    const includeNumbers = true;\r\n\r\n    const lowerCaseChars = `abcdefgjijklmnopqrstuvwxyz`;\r\n    const upperCaseChars = `ABCDEFGHIJKLMNOPQRSTUVWXYZ`;\r\n    const numberChars = `0123456789`;\r\n\r\n    let allowedChars = ``;\r\n    let password = ``;\r\n\r\n    allowedChars += includeLowerCase ? lowerCaseChars : ``;\r\n    allowedChars += includeUpperCase ? upperCaseChars : ``;\r\n    allowedChars += includeNumbers ? numberChars : ``;\r\n\r\n    if(passwordLength <= 0)\r\n        return `(Password length must be at least one)`;\r\n    \r\n\r\n    if(allowedChars.length === 0)\r\n        return `(At least one set of characters need to be selected)`;\r\n    \r\n\r\n    for(let i = 0; i < passwordLength; i++)\r\n    {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        password += allowedChars[randomIndex];\r\n    }\r\n    \r\n    return `${password}`;\r\n}\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/random_pass.js?");

/***/ })

}]);