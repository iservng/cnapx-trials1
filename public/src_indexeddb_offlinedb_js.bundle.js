"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcnapx_trials"] = self["webpackChunkcnapx_trials"] || []).push([["src_indexeddb_offlinedb_js"],{

/***/ "./src/indexeddb/offlinedb.js":
/*!************************************!*\
  !*** ./src/indexeddb/offlinedb.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfflineDB: () => (/* binding */ OfflineDB)\n/* harmony export */ });\n\r\n\r\n/**\r\n * The \"Offline\" database class is responsible for setting up the databases used for offline store POS calculations. The class class is loaded and executed after a user has onboard ie have registered in the application.\r\n */\r\nclass OfflineDB \r\n{\r\n\r\n    constructor() {}\r\n\r\n\r\n    /**\r\n     * This function as the public api of this class, when its called on the object-instance, the onupgradeneeded-event handler is what gets executed and also executes the callback.\r\n     * \r\n     * @param {string} callback \r\n     */\r\n    withDB(callback) \r\n    {\r\n        //Request v1 of the database\r\n        let openRequest = window.indexedDB.open('cnapx', 1);\r\n\r\n        //Log any error\r\n        openRequest.onerror = console.error;\r\n\r\n        //Or call this when done\r\n        openRequest.onsuccess = event => {\r\n            //The result of the request is the database.\r\n            let db = event.target.result;\r\n            //Invoke the callback with the database\r\n            callback(db);\r\n        };\r\n\r\n        /**\r\n         * If version 1 of the database does not yet exist, then this event handler will be triggered. This is used to create and initialize object-stores and indexes when the DB is first created or to modify then when we switch from one version of the database schema to the other.\r\n         */\r\n        openRequest.onupgradeneeded = event => {\r\n            let db = event.target.result;\r\n            this.#initdb(db, callback);\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 2. THE initdb(db, callback) FUNCTION\r\n     * -------------------------------------\r\n     * withDB() calls this function if the database has not been initialized yet. We set up the database, then pass the database to the callback function.\r\n     * \r\n     * Our cnapx database include object-store that holds objects like this\r\n     * {\r\n            zipcode: \"01234\",\r\n            city: \"Alston\",\r\n            state: \"MA\"\r\n        }\r\n    */\r\n\r\n    #initdb(db, callback) \r\n    {\r\n        /**\r\n         * Creates the object-store, specifying a name for the store and an options-object that include the key-path specifying the property name of the key field for this store.\r\n         */\r\n        let products = db.createObjectStore('products', {autoIncrement: true});\r\n        products.createIndex('price', 'price', {unique:false});\r\n        products.createIndex('name', 'name', {unique:false});\r\n\r\n        let moneyIn = db.createObjectStore('money-in', {autoIncrement: true});\r\n        moneyIn.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let moneyOut = db.createObjectStore('money-out', {autoIncrement: true});\r\n        moneyOut.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let cart = db.createObjectStore('cart', {autoIncrement: true});\r\n        cart.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let marchant = db.createObjectStore('marchant', {autoIncrement: true});\r\n        marchant.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let dailyTransaction = db.createObjectStore('daily-transactions', {autoIncrement: true});\r\n        dailyTransaction.createIndex('createdOn', 'createdOn', {unique:true});\r\n        \r\n        \r\n        //Execute the callback\r\n        callback();\r\n    \r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/indexeddb/offlinedb.js?");

/***/ })

}]);