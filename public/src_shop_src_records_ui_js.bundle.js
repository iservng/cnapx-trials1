"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcnapx_trials"] = self["webpackChunkcnapx_trials"] || []).push([["src_shop_src_records_ui_js"],{

/***/ "./src/indexeddb_src/offlinedb.js":
/*!****************************************!*\
  !*** ./src/indexeddb_src/offlinedb.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfflineDB: () => (/* binding */ OfflineDB)\n/* harmony export */ });\n\r\n\r\n/**\r\n * The \"Offline\" database class is responsible for setting up the databases used for offline store POS calculations. The class class is loaded and executed after a user has onboard ie have registered in the application.\r\n */\r\nclass OfflineDB \r\n{\r\n\r\n    constructor() {}\r\n\r\n\r\n    /**\r\n     * This function as the public api of this class, when its called on the object-instance, the onupgradeneeded-event handler is what gets executed and also executes the callback.\r\n     * \r\n     * @param {string} callback \r\n     */\r\n    withDB(callback) \r\n    {\r\n        //Request v1 of the database\r\n        let openRequest = window.indexedDB.open('cnapx', 1);\r\n\r\n        //Log any error\r\n        openRequest.onerror = console.error;\r\n\r\n        //Or call this when done\r\n        openRequest.onsuccess = event => {\r\n            //The result of the request is the database.\r\n            let db = event.target.result;\r\n            //Invoke the callback with the database\r\n            callback(db);\r\n        };\r\n\r\n        /**\r\n         * If version 1 of the database does not yet exist, then this event handler will be triggered. This is used to create and initialize object-stores and indexes when the DB is first created or to modify then when we switch from one version of the database schema to the other.\r\n         */\r\n        openRequest.onupgradeneeded = event => {\r\n            let db = event.target.result;\r\n            this.#initdb(db, callback);\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 2. THE initdb(db, callback) FUNCTION\r\n     * -------------------------------------\r\n     * withDB() calls this function if the database has not been initialized yet. We set up the database, then pass the database to the callback function.\r\n     * \r\n     * Our cnapx database include object-store that holds objects like this\r\n     * {\r\n            zipcode: \"01234\",\r\n            city: \"Alston\",\r\n            state: \"MA\"\r\n        }\r\n    */\r\n\r\n    #initdb(db, callback) \r\n    {\r\n        /**\r\n         * Creates the object-store, specifying a name for the store and an options-object that include the key-path specifying the property name of the key field for this store.\r\n         */\r\n        // let products = db.createObjectStore('products', {keyPath: \"createdOn\"});\r\n        let products = db.createObjectStore('products', {autoIncrement: true});\r\n        products.createIndex('cost_price', 'cost_price', {unique:false});\r\n        products.createIndex('selling_price', 'selling_price', {unique:false});\r\n        products.createIndex('product_name', 'product_name', {unique:true});\r\n        products.createIndex('product_quantity', 'product_quantity', {unique:false});\r\n\r\n        let moneyIn = db.createObjectStore('money-in', {autoIncrement: true});\r\n        moneyIn.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let moneyOut = db.createObjectStore('money-out', {autoIncrement: true});\r\n        moneyOut.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n\r\n        /**\r\n         * CHECKS TODOS\r\n         * 1. Each products enter as sold into the cart must be entered with the selling price as at when the product was sold\r\n         * \r\n         */\r\n        let cart = db.createObjectStore('cart', {autoIncrement: true});\r\n        cart.createIndex('createdOn', 'createdOn', {unique:false});\r\n        cart.createIndex('transaction_id', 'transaction_id', {unique:false});\r\n\r\n        let marchant = db.createObjectStore('marchant', {autoIncrement: true});\r\n        marchant.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let customer = db.createObjectStore('customer', {autoIncrement: true});\r\n        customer.createIndex('createdOn', 'createdOn', {unique:true});\r\n        customer.createIndex('phone', 'phone', {unique:true});\r\n\r\n\r\n        let cnapxClient = db.createObjectStore('cnapxClient', {autoIncrement: true});\r\n        cnapxClient.createIndex('createdOn', 'createdOn', {unique:true});\r\n        cnapxClient.createIndex('phone', 'phone', {unique:true});\r\n\r\n        let dailyTransaction = db.createObjectStore('daily-transactions', {autoIncrement: true});\r\n        dailyTransaction.createIndex('createdOn', 'createdOn', {unique:true});\r\n        dailyTransaction.createIndex('transaction_id', 'transaction_id', {unique:true});\r\n        \r\n        \r\n        //Execute the callback\r\n        callback();\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // =========================================\r\n    \r\n    saveToDB(objectStoreName, callback, data) {\r\n        this.withDB(db => {\r\n            // Create a read-only transaction object for this\r\n            let transaction = db.transaction([objectStoreName], 'readwrite');\r\n\r\n            //Get the object-store from the transaction\r\n            let objectStore = transaction.objectStore(objectStoreName);\r\n            const request = objectStore.add(data);\r\n\r\n            request.onsuccess = (event) => {\r\n                let productId = event.target.result;\r\n                callback(productId);\r\n            };\r\n        \r\n        });\r\n    }\r\n    // =========================================\r\n\r\n    getTransactionDetailFromDB(objectStoreName, transactionId, indexName, callback) {\r\n        \r\n        \r\n    }\r\n    // =========================================\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/indexeddb_src/offlinedb.js?");

/***/ }),

/***/ "./src/shop_src/records_ui.js":
/*!************************************!*\
  !*** ./src/shop_src/records_ui.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecordsUi: () => (/* binding */ RecordsUi)\n/* harmony export */ });\n/* harmony import */ var _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../indexeddb_src/offlinedb.js */ \"./src/indexeddb_src/offlinedb.js\");\n/* harmony import */ var _utils_src_insert_into_DOM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils_src/insert_into_DOM.js */ \"./src/utils_src/insert_into_DOM.js\");\n/* harmony import */ var _utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils_src/toast_it.js */ \"./src/utils_src/toast_it.js\");\n/* harmony import */ var _utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils_src/date_4rm_milisec_to_humanReadable.js */ \"./src/utils_src/date_4rm_milisec_to_humanReadable.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass RecordsUi\r\n{\r\n    #_mErrors;\r\n    #mErrorMsg;\r\n    #offlinedb;\r\n    #monthNames;\r\n    #weekDayNames;\r\n    #nameOfCurrentMonth;\r\n    #currentMonth;\r\n    #nextMonth;\r\n    #upperboundValue;\r\n    #lowerboundValue;\r\n\r\n    #lowerOpen;\r\n    #upperOpen;\r\n\r\n    constructor()\r\n    {\r\n        this.#_mErrors = 0;\r\n        this.#mErrorMsg = '';\r\n        this.#offlinedb = new _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_0__.OfflineDB();\r\n        this.#monthNames = [\r\n            'January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December',\r\n        ];\r\n        this.#weekDayNames = [\r\n            'Monday',\r\n            'Tuesday',\r\n            'Wednesday',\r\n            'Thusday',\r\n            'Friday',\r\n            'Saturday',\r\n            'Sunday',\r\n        ];\r\n        let dt = new Date();\r\n        this.#currentMonth = dt.getMonth();\r\n        // ======================\r\n        let nxtMonth = this.#currentMonth + 1;\r\n        let dtsmp = new Date(dt.getFullYear(), nxtMonth, 1);\r\n        let crttsmp = new Date(dt.getFullYear(), dt.getMonth(), 1);\r\n        // ======================\r\n        this.#lowerboundValue = crttsmp.getTime();\r\n        this.#lowerOpen = false;\r\n        // ======================\r\n        this.#upperboundValue = dtsmp.getTime();\r\n        this.#upperOpen = true;\r\n        // ======================\r\n        this.#nameOfCurrentMonth = this.#monthNames[dt.getMonth()];\r\n        // ======================\r\n    }\r\n\r\n    //PUBLIC API\r\n    createUi()\r\n    {\r\n        if(this.#_mErrors == 0)\r\n        {\r\n            let content  = `\r\n            <div class=\"container\">\r\n                <div class=\"row\" style=\"margin-top: 4rem;\">\r\n                    <div class=\"col s12\" style=\"margin-bottom: 4rem;\">\r\n                        <h6>\r\n                            <b class=\"purple-text text-darken-3\">\r\n                                Shop Inventory Records\r\n                            </b>\r\n                        </h6>\r\n                        <a href=\"#\" class=\"sidenav-trigger purple-text text-darken-4\" data-target=\"mobile-demo\">\r\n                            <b>Menu</b>\r\n                        </a>\r\n                        <a href=\"#\" class=\"btn-flat purple-text text-darken-4 dashboard\">\r\n                            Dashboard\r\n                        </a>\r\n                    </div>\r\n                    \r\n                    <!-- MONEY-IN -->\r\n                    <div class=\"col s12 m6 l6\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col s12\">\r\n                                <div class=\"card z-depth-0\" style=\"border: 1px solid #f3e5f5;\">\r\n                                    <div class=\"card-content purple-text purple lighten-5\">\r\n                                        <span class=\"card-title\">Product Quantity in Inventory</span>\r\n                                        <h4 class=\"gtotal_of_products\">Total Balance</h4>\r\n                                    </div>\r\n                                    <div class=\"card-action\">\r\n                                        <b>Net Value: </b><b class=\"prodt_gtotal_by_Quantity\">N 0.00</b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <!-- MONEY-OUT  -->\r\n                    <div class=\"col s12 m6 l6\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col s12\">\r\n                                <div class=\"card z-depth-0\">\r\n                                    <div class=\"card-content purple-text\" style=\"border: 1px solid #f3e5f5;\">\r\n                                        <span class=\"card-title \">Total Products</span>\r\n                                        <h4 class=\"product_count\"></h4>\r\n                                    </div>\r\n                                    <div class=\"card-action purple lighten-5\">\r\n                                        <b>Total Number of Unique Products</b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div class=\"row\">\r\n                    <!-- TABLE OF MONEY-IN RECORDS  -->\r\n                    <div class=\"col s12\">\r\n                        <h5 class=\"purple-text text-darken-3\" style=\"margin-bottom: 1.7rem; margin-top: 20px;\">\r\n                            <b><small>Inventory Current Summary</small></b>\r\n                        </h5>\r\n                        \r\n                        <table class=\"highlight responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Date</th>\r\n                                    <th>Product</th>\r\n                                    <th>QTY</th>\r\n                                    <th>CP</th>\r\n                                    <th>SP</th>\r\n                                    <th>Value</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody id=\"products_inventory_records\"></tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td colspan=\"2\"></td>\r\n                                    <td>\r\n                                        <b class=\"gtotal_of_products\">Total</b>\r\n                                    </td>\r\n                                    <td>\r\n                                        <b class=\"cost_price_gtotal\">\r\n                                            N 0.00\r\n                                        </b>\r\n                                    </td>\r\n                                    <td>\r\n                                        <b class=\"selling_price_gtotal\">\r\n                                            N 0.00\r\n                                        </b>\r\n                                    </td>\r\n                                    \r\n                                    <td>\r\n                                        <b class=\"prodt_gtotal_by_Quantity\">\r\n                                            N 0.00\r\n                                        </b>\r\n                                    </td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <div class=\"col s12\" style=\"margin-top: 4rem;\">\r\n                        <div class=\"divider\"></div>\r\n                        <p> <small>Powered by</small> <b class=\"purple-text\">iservng</b></p>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            `;\r\n            (0,_utils_src_insert_into_DOM_js__WEBPACK_IMPORTED_MODULE_1__.insertIntoDOM)('main', content);\r\n\r\n            //Query the data-base for the current state of products inventory\r\n            this.#loadCurrentProductsInventory();\r\n\r\n            //Count the total number of product available\r\n            this.#countInventoryProducts();\r\n\r\n\r\n            \r\n\r\n\r\n            /**\r\n             * Register event handler for view_all_records\r\n             */\r\n            if(document.querySelector('.view_all_records'))\r\n            {\r\n                document.querySelector('.view_all_records').addEventListener('click', e => {\r\n                    e.preventDefault();\r\n                    __webpack_require__.e(/*! import() */ \"src_shop_src_records_details_ui_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../shop_src/records_details_ui.js */ \"./src/shop_src/records_details_ui.js\"))\r\n                    .then(m => {\r\n                        let recodsDetailsUi = new m.RecordDetailsUi();\r\n                        recodsDetailsUi.createUi();\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error.message);\r\n                        (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_2__.toastIt)('red', 'Unable to load records details UI');\r\n                    });\r\n                });\r\n            }\r\n\r\n        }\r\n        else \r\n        {\r\n            (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_2__.toastIt)('red', this.#mErrorMsg);\r\n            console.log(this.#mErrorMsg);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //The utility class\r\n    #loadCurrentProductsInventory()\r\n    {\r\n        let sellingPriceGrandTotal = [];\r\n        let costgPriceGrandTotal = [];\r\n        let quantityOfProduct = [];\r\n        let productGTotalValueByQuantity = [];\r\n\r\n        this.#offlinedb.withDB(db => {\r\n            let transaction = db.transaction('products');\r\n            let objectStore = transaction.objectStore('products');\r\n            objectStore.openCursor().onsuccess = event => {\r\n                const cursor = event.target.result;\r\n                if(cursor)\r\n                {\r\n                    //Pre computations\r\n                    sellingPriceGrandTotal.push(Number(cursor.value.selling_price));\r\n\r\n                    quantityOfProduct.push(Number(cursor.value.product_quantity));\r\n\r\n                    costgPriceGrandTotal.push(Number(cursor.value.cost_price));\r\n                    let dateCreated = (0,_utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__.convertDateFromMilliSecToDateString)(cursor.value.createdOn);\r\n\r\n                    let productValueByQuantity = (cursor.value.selling_price * cursor.value.product_quantity);\r\n\r\n                    productGTotalValueByQuantity.push(productValueByQuantity);\r\n\r\n                    document.querySelector('#products_inventory_records').innerHTML += `\r\n                        <tr>\r\n                            <td>${dateCreated}</td>\r\n                            <td>\r\n                                <a href=\"#\" class=\"editables\" id=${cursor.key}>${cursor.value.product_name}</a>\r\n                            </td>\r\n                            <td>${cursor.value.product_quantity}</td>\r\n                            <td>\r\n                                <span style=\"text-decoration: line-through;\">\r\n                                N</span> ${cursor.value.cost_price}.00\r\n                            </td>\r\n                            <td>\r\n                                <span style=\"text-decoration: line-through;\">N</span> ${cursor.value.selling_price}.00\r\n                            </td>\r\n                            <td>\r\n                                <span style=\"text-decoration: line-through;\">N</span> ${cursor.value.selling_price * cursor.value.product_quantity}.00\r\n                            </td>\r\n                        </tr>\r\n                    `;\r\n\r\n\r\n                    //register event handler for editables \r\n                    let editables = document.querySelectorAll('.editables');\r\n                    editables.forEach(elem => {\r\n                        elem.addEventListener('click', e => {\r\n                            e.preventDefault();\r\n                            console.log(e.target);\r\n                            __webpack_require__.e(/*! import() */ \"src_shop_src_edit_product_ui_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./edit_product_ui.js */ \"./src/shop_src/edit_product_ui.js\"))\r\n                            .then(m => {\r\n                                let productEditUi = new m.EditProductUi(e.target);\r\n                                productEditUi.createUi();\r\n                            })\r\n                            .catch(error => {\r\n                                console.log(error.message);\r\n                                (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_2__.toastIt)('red', 'Unable to load product Edit Ui');\r\n                            });\r\n                        }, false);\r\n                    });\r\n\r\n\r\n                    let spGtotalContainers = document.querySelectorAll('.selling_price_gtotal');\r\n                    spGtotalContainers.forEach(cElem => {\r\n                        cElem.innerHTML = `<span style=\"text-decoration: line-through;\">N</span> ${sellingPriceGrandTotal.reduce((x,y) => x+y,0)}.00`;\r\n                    });\r\n\r\n                    let qtOfProductContainers = document.querySelectorAll('.gtotal_of_products');\r\n                    qtOfProductContainers.forEach(cElem => {\r\n                        cElem.innerHTML = quantityOfProduct.reduce((x,y) => x+y,0);\r\n                    });\r\n\r\n                    let cpGtotalContainers = document.querySelectorAll('.cost_price_gtotal');\r\n                    cpGtotalContainers.forEach(cElem => {\r\n                        cElem.innerHTML = `<span style=\"text-decoration: line-through;\">N</span> ${costgPriceGrandTotal.reduce((x,y) => x+y,0)}.00`;\r\n                    });\r\n\r\n                    // productGTotalValueByQuantity\r\n                    let prodtGTotalByQtyContainers = document.querySelectorAll('.prodt_gtotal_by_Quantity');\r\n                    prodtGTotalByQtyContainers.forEach(elem => {\r\n                        elem.innerHTML = `<span style=\"text-decoration: line-through;\">N</span> ${productGTotalValueByQuantity.reduce((x,y) => x+y,0)}.00`;\r\n                    });\r\n\r\n                    cursor.continue();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    #countInventoryProducts()\r\n    {\r\n        this.#offlinedb.withDB(db => {\r\n            let transaction = db.transaction('products');\r\n            let objectStore = transaction.objectStore('products');\r\n            let request = objectStore.count();\r\n\r\n            request.onsuccess = () => {\r\n                let countContainers = document.querySelectorAll('.product_count');\r\n                countContainers.forEach(elem => {\r\n                    elem.innerHTML = request.result;\r\n                });\r\n            };\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/shop_src/records_ui.js?");

/***/ }),

/***/ "./src/utils_src/date_4rm_milisec_to_humanReadable.js":
/*!************************************************************!*\
  !*** ./src/utils_src/date_4rm_milisec_to_humanReadable.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertDateFromMilliSecToDateString: () => (/* binding */ convertDateFromMilliSecToDateString)\n/* harmony export */ });\n/* harmony import */ var _month_names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./month_names.js */ \"./src/utils_src/month_names.js\");\n\r\nconst convertDateFromMilliSecToDateString = (value) => {\r\n    if(value)\r\n    {\r\n        console.log(value);\r\n        const ts = (value.seconds+value.nanoseconds/1000000000)*1000;\r\n\r\n        // nanoseconds\r\n        let dt = new Date(Number(ts));\r\n        let y = dt.getFullYear();\r\n        let m = _month_names_js__WEBPACK_IMPORTED_MODULE_0__.monthNames[dt.getMonth()];\r\n        let d = dt.getDate();\r\n        return `${d} ${m}, ${y}`;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/date_4rm_milisec_to_humanReadable.js?");

/***/ }),

/***/ "./src/utils_src/month_names.js":
/*!**************************************!*\
  !*** ./src/utils_src/month_names.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   monthNames: () => (/* binding */ monthNames)\n/* harmony export */ });\n\r\n\r\nconst monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/month_names.js?");

/***/ })

}]);