"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcnapx_trials"] = self["webpackChunkcnapx_trials"] || []).push([["src_shop_src_checks_and_balances_js"],{

/***/ "./src/indexeddb_src/offlinedb.js":
/*!****************************************!*\
  !*** ./src/indexeddb_src/offlinedb.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfflineDB: () => (/* binding */ OfflineDB)\n/* harmony export */ });\n\r\n\r\n/**\r\n * The \"Offline\" database class is responsible for setting up the databases used for offline store POS calculations. The class class is loaded and executed after a user has onboard ie have registered in the application.\r\n */\r\nclass OfflineDB \r\n{\r\n\r\n    constructor() {}\r\n\r\n\r\n    /**\r\n     * This function as the public api of this class, when its called on the object-instance, the onupgradeneeded-event handler is what gets executed and also executes the callback.\r\n     * \r\n     * @param {string} callback \r\n     */\r\n    withDB(callback) \r\n    {\r\n        //Request v1 of the database\r\n        let openRequest = window.indexedDB.open('cnapx', 1);\r\n\r\n        //Log any error\r\n        openRequest.onerror = console.error;\r\n\r\n        //Or call this when done\r\n        openRequest.onsuccess = event => {\r\n            //The result of the request is the database.\r\n            let db = event.target.result;\r\n            //Invoke the callback with the database\r\n            callback(db);\r\n        };\r\n\r\n        /**\r\n         * If version 1 of the database does not yet exist, then this event handler will be triggered. This is used to create and initialize object-stores and indexes when the DB is first created or to modify then when we switch from one version of the database schema to the other.\r\n         */\r\n        openRequest.onupgradeneeded = event => {\r\n            let db = event.target.result;\r\n            this.#initdb(db, callback);\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 2. THE initdb(db, callback) FUNCTION\r\n     * -------------------------------------\r\n     * withDB() calls this function if the database has not been initialized yet. We set up the database, then pass the database to the callback function.\r\n     * \r\n     * Our cnapx database include object-store that holds objects like this\r\n     * {\r\n            zipcode: \"01234\",\r\n            city: \"Alston\",\r\n            state: \"MA\"\r\n        }\r\n    */\r\n\r\n    #initdb(db, callback) \r\n    {\r\n        /**\r\n         * Creates the object-store, specifying a name for the store and an options-object that include the key-path specifying the property name of the key field for this store.\r\n         */\r\n        // let products = db.createObjectStore('products', {keyPath: \"createdOn\"});\r\n        let products = db.createObjectStore('products', {autoIncrement: true});\r\n        products.createIndex('cost_price', 'cost_price', {unique:false});\r\n        products.createIndex('selling_price', 'selling_price', {unique:false});\r\n        products.createIndex('product_name', 'product_name', {unique:true});\r\n        products.createIndex('product_quantity', 'product_quantity', {unique:false});\r\n\r\n        let moneyIn = db.createObjectStore('money-in', {autoIncrement: true});\r\n        moneyIn.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let moneyOut = db.createObjectStore('money-out', {autoIncrement: true});\r\n        moneyOut.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n\r\n        /**\r\n         * CHECKS TODOS\r\n         * 1. Each products enter as sold into the cart must be entered with the selling price as at when the product was sold\r\n         * \r\n         */\r\n        let cart = db.createObjectStore('cart', {autoIncrement: true});\r\n        cart.createIndex('createdOn', 'createdOn', {unique:false});\r\n        cart.createIndex('transaction_id', 'transaction_id', {unique:false});\r\n\r\n        let marchant = db.createObjectStore('marchant', {autoIncrement: true});\r\n        marchant.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let customer = db.createObjectStore('customer', {autoIncrement: true});\r\n        customer.createIndex('createdOn', 'createdOn', {unique:true});\r\n        customer.createIndex('phone', 'phone', {unique:true});\r\n\r\n\r\n        let cnapxClient = db.createObjectStore('cnapxClient', {autoIncrement: true});\r\n        cnapxClient.createIndex('createdOn', 'createdOn', {unique:true});\r\n        cnapxClient.createIndex('phone', 'phone', {unique:true});\r\n\r\n        let dailyTransaction = db.createObjectStore('daily-transactions', {autoIncrement: true});\r\n        dailyTransaction.createIndex('createdOn', 'createdOn', {unique:true});\r\n        dailyTransaction.createIndex('transaction_id', 'transaction_id', {unique:true});\r\n        \r\n        \r\n        //Execute the callback\r\n        callback();\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // =========================================\r\n    \r\n    saveToDB(objectStoreName, callback, data) {\r\n        this.withDB(db => {\r\n            // Create a read-only transaction object for this\r\n            let transaction = db.transaction([objectStoreName], 'readwrite');\r\n\r\n            //Get the object-store from the transaction\r\n            let objectStore = transaction.objectStore(objectStoreName);\r\n            const request = objectStore.add(data);\r\n\r\n            request.onsuccess = (event) => {\r\n                let productId = event.target.result;\r\n                callback(productId);\r\n            };\r\n        \r\n        });\r\n    }\r\n    // =========================================\r\n\r\n    getTransactionDetailFromDB(objectStoreName, transactionId, indexName, callback) {\r\n        \r\n        \r\n    }\r\n    // =========================================\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/indexeddb_src/offlinedb.js?");

/***/ }),

/***/ "./src/shop_src/checks_and_balances.js":
/*!*********************************************!*\
  !*** ./src/shop_src/checks_and_balances.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChecksAndBalances: () => (/* binding */ ChecksAndBalances)\n/* harmony export */ });\n/* harmony import */ var _utils_src_insert_into_DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils_src/insert_into_DOM */ \"./src/utils_src/insert_into_DOM.js\");\n/* harmony import */ var _utils_src_toast_it__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils_src/toast_it */ \"./src/utils_src/toast_it.js\");\n/* harmony import */ var _indexeddb_src_offlinedb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../indexeddb_src/offlinedb */ \"./src/indexeddb_src/offlinedb.js\");\n/* harmony import */ var _utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils_src/date_4rm_milisec_to_humanReadable.js */ \"./src/utils_src/date_4rm_milisec_to_humanReadable.js\");\n\r\n\r\n\r\n\r\n\r\nclass ChecksAndBalances\r\n{\r\n    #_mErrors;\r\n    #mErrorMsg;\r\n    #objectStoreName;\r\n    #offlinedb;\r\n    #currentMonth;\r\n    #lowerboundValue;\r\n    #lowerOpen;\r\n\r\n    #upperboundValue;\r\n    #upperOpen;\r\n\r\n    #nameOfCurrentMonth;\r\n    #monthNames;\r\n    #weekDayNames;\r\n    #indexName;\r\n    constructor()\r\n    {\r\n        this.#_mErrors = 0;\r\n        this.#mErrorMsg = ``;\r\n        this.#offlinedb = new _indexeddb_src_offlinedb__WEBPACK_IMPORTED_MODULE_2__.OfflineDB();\r\n        this.#indexName = 'createdOn';\r\n        this.#objectStoreName = 'cart';\r\n        this.#monthNames = [\r\n            'January',\r\n            'February',\r\n            'March',\r\n            'April',\r\n            'May',\r\n            'June',\r\n            'July',\r\n            'August',\r\n            'September',\r\n            'October',\r\n            'November',\r\n            'December',\r\n        ];\r\n        this.#weekDayNames = [\r\n            'Monday',\r\n            'Tuesday',\r\n            'Wednesday',\r\n            'Thusday',\r\n            'Friday',\r\n            'Saturday',\r\n            'Sunday',\r\n        ];\r\n        // =======================\r\n        let dt = new Date();\r\n        this.#currentMonth = dt.getMonth();\r\n        // ========================\r\n        let nxtMonth = this.#currentMonth + 1;\r\n        let dtsmp = new Date(dt.getFullYear(), nxtMonth, 1);\r\n        let crttsmp = new Date(dt.getFullYear(), dt.getMonth(), 1);\r\n        // ========================\r\n        this.#lowerboundValue = crttsmp.getTime();\r\n        this.#lowerOpen = false;\r\n        // ========================\r\n        this.#upperboundValue = dtsmp.getTime();\r\n        this.#upperOpen = true;\r\n        // ========================\r\n        this.#nameOfCurrentMonth = this.#monthNames[dt.getMonth()];\r\n        // =======================\r\n    }\r\n\r\n\r\n    /**\r\n     * CLASS PUBLIC API\r\n     */\r\n    createUi()\r\n    {\r\n        if(this.#_mErrors == 0)\r\n        {\r\n            let content = `\r\n            <div class=\"container\" style=\"margin-top: 4rem;\">\r\n                <div class=\"row\" style=\"margin-bottom: 2rem;\">\r\n                    <div class=\"col s12\" style=\"margin-bottom: 1rem;\">\r\n                        <h5>\r\n                            <span class=\"date_title_elem\">${this.#nameOfCurrentMonth}</span> Sales Dashboard.\r\n                        </h5>\r\n                        <a href=\"#\" class=\"sidenav-trigger show-on-large purple-text text-darken-4\" data-target=\"mobile-demo\">\r\n                            menu\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n\r\n                <!--THE dATE RANGE-->\r\n                <div class=\"row\" style=\"margin-bottom: 2rem;\">\r\n                    <div class=\"col s12\">\r\n                        <b class=\"purple-text\">\r\n                            Select Date Range to view summary\r\n                        </b>\r\n                    </div>\r\n                    <div class=\"col s6\">\r\n                        <div class=\"row\">\r\n                            <div class=\"input-field col s12\">\r\n                                <input id=\"date1\" type=\"date\" class=\"validate\">\r\n                                <label for=\"date1\">Start Date</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col s6\">\r\n                        <div class=\"row\">\r\n                            <div class=\"input-field col s12\">\r\n                                <input id=\"date2\" type=\"date\" class=\"validate\">\r\n                                <label for=\"date2\">End Date</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\" style=\"margin-bottom: 2rem;\">\r\n                    <div class=\"col s12\" style=\"margin-bottom: 0.8rem;\">\r\n                        <b class=\"purple-text\">\r\n                            Quick Sales Summary in <span class=\"date_title_elem\">${this.#nameOfCurrentMonth}</span>\r\n                        </b>\r\n                    </div>\r\n                    <div class=\"col s12 m4 l4\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col s12\">\r\n                                <div class=\"card-panel purple\">\r\n                                    <span class=\"white-text\">\r\n                                        <h4><span style=\"text-decoration: line-through;\">N</span> <span class=\"grand_total\">0</span>.00</h4>\r\n                                        <b>Total Amount Made in <span class=\"date_title_elem\">${this.#nameOfCurrentMonth}</span></b>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col s12 m4 l4\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col s12\">\r\n                                <div class=\"card-panel purple\">\r\n                                    <span class=\"white-text\">\r\n                                        <h4><span style=\"text-decoration: line-through;\">N</span> <span class=\"profit_total\">0</span>.00</h4>\r\n                                        <b>Total profit Made in <span class=\"date_title_elem\">${this.#nameOfCurrentMonth}</span></b>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col s12 m4 l4\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col s12\">\r\n                                <div class=\"card-panel purple\">\r\n                                    <span class=\"white-text\">\r\n                                        <h4 class=\"totalQTofSoldProducts\">0.00</h4>\r\n                                        <b>\r\n                                            Total Product Sold in <span class=\"date_title_elem\">${this.#nameOfCurrentMonth}</span>\r\n                                        </b>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col s12\">\r\n                        <h6 class=\"Paget_title purple-text\">\r\n                            Tabulated <span class=\"date_title_elem\">${this.#nameOfCurrentMonth}</span> Sales Details\r\n                        </h6>\r\n                    </div>\r\n                    <div class=\"col s12 z-depth-0\">\r\n                        <table class=\"highlight responsive-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th><small>Description</small></th>\r\n                                    <th><small>Cost Price</small></th>\r\n                                    <th><small>Rate</small></th>\r\n                                    <th><small>Quantity</small></th>\r\n                                    <th><small>Amount</small></th>\r\n                                    <th><small>QT/CP</small></th>\r\n                                    <th><small>Profit</small></th>\r\n                                    <th><small>Date</small></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody id=\"table_records\"></tbody>\r\n                            <tfoot>\r\n                                <tr>\r\n                                    <td></td>\r\n                                    <td></td>\r\n                                    <td></td>\r\n                                    <td>\r\n                                        <b class=\"totalQTofSoldProducts\">Total:\r\n                                        </b>\r\n                                    </td>\r\n                                    <td>\r\n                                        <b>\r\n                                            <span style=\"text-decoration: line-through;\">N</span><span class=\"grand_total\">7</span>.00\r\n                                        </b>\r\n                                    </td>\r\n                                    <td></td>\r\n                                    <td>\r\n                                        <b>\r\n                                            <span style=\"text-decoration: line-through;\">N</span><span class=\"profit_total\">0</span>.00\r\n                                        </b>\r\n                                    </td>\r\n                                    <td></td>\r\n                                </tr>\r\n                            </tfoot>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <!--ATRIBUTION ROW-->\r\n                <div class=\"row\">\r\n                    <div class=\"col s12\" style=\"margin-top: 4rem;\">\r\n                        <p>\r\n                            <small>Powered by </small><b class=\"purple-text\">iservng</b>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>`;\r\n            (0,_utils_src_insert_into_DOM__WEBPACK_IMPORTED_MODULE_0__.insertIntoDOM)('main', content);\r\n\r\n\r\n            /**\r\n             * After the reciept UI has been succesfully painted on the DOM, then using the transaction-id we can query for the transaction fron the cart with specified transaction id\r\n             */\r\n            // let objectStoreName = 'cart';\r\n            // let transactionId = this.#transactionId;\r\n            // let indexName = 'createdOn';\r\n            // =======================\r\n            this.#getCartRecordDetailsFromDB(this.#objectStoreName, this.#indexName, this.#lowerboundValue, this.#upperboundValue, this.#lowerOpen, this.#upperOpen);\r\n\r\n\r\n            //Register Event handler for the change of date2\r\n            if(document.querySelector('#date2'))\r\n            {\r\n                document.querySelector('#date2').addEventListener('change', e => {\r\n                    e.preventDefault();\r\n                    this.#processDateRangeOfSales(e.target);\r\n                });\r\n            }\r\n\r\n        }\r\n        else \r\n        {\r\n            (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', this.#mErrorMsg);\r\n            console.log(this.#mErrorMsg);\r\n        }\r\n    }\r\n\r\n\r\n    #getCartRecordDetailsFromDB(objectStoreName, indexName, lowerBound, upperBound, lowerOpen, upperOpen)\r\n    {\r\n        document.querySelector('#table_records').innerHTML  = ``;\r\n\r\n        let amount = [];\r\n        let totalQTofSoldProducts = [];\r\n        let totalAmountofProfitMade = [];\r\n        // let recieptCreatedOn = 0;\r\n        let recieptNumber = ``;\r\n\r\n        this.#offlinedb.withDB(db => {\r\n            // Create a read-only transaction object for this\r\n            let transaction = db.transaction([objectStoreName]);\r\n            let objectStore = transaction.objectStore(objectStoreName);\r\n            let index = objectStore.index(indexName);\r\n\r\n            let boundKeyRange = IDBKeyRange.bound(lowerBound, upperBound, lowerOpen, upperOpen);\r\n\r\n            index.openCursor(boundKeyRange).onsuccess = event => {\r\n                const cursor = event.target.result;\r\n                if(cursor)\r\n                {\r\n                    let specificItem = Number(cursor.value.key);\r\n                    let itemQuantity = Number(cursor.value.item);\r\n                    let sellingprice = Number(cursor.value.selling_price);\r\n                    let amountMadeWithQt = Number(sellingprice * itemQuantity);\r\n                    let costprice = Number(cursor.value.cost_price);\r\n                    let quantityAndCostPrice = Number(itemQuantity * costprice);\r\n                    let profitPerItemSoldWithQt = Number(amountMadeWithQt - quantityAndCostPrice);\r\n\r\n                    // ------------------------\r\n                    // let dt = new Date(Number(cursor.value.createdOn));\r\n                    // let y = dt.getFullYear();\r\n                    // let m = this.#monthNames[dt.getMonth()];\r\n                    // let d = dt.getDate();\r\n                    // let recieptCreatedOn = `${d} ${m}, ${y}`;\r\n                    let recieptCreatedOn = (0,_utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__.convertDateFromMilliSecToDateString)(cursor.value.createdOn);\r\n\r\n                    //Start another transaction\r\n                    this.#offlinedb.withDB(db => {\r\n                        db.transaction('products')\r\n                        .objectStore('products')\r\n                        .get(specificItem).onsuccess = (event) => {\r\n                            let product = event.target.result;\r\n                            \r\n                            amount.push(sellingprice * itemQuantity);\r\n                            totalQTofSoldProducts.push(itemQuantity);\r\n                            totalAmountofProfitMade.push(profitPerItemSoldWithQt);\r\n\r\n                            document.querySelector('#table_records').innerHTML += `\r\n                            <tr>\r\n                                <td><small>${product.product_name}</small></td>\r\n                                <td>\r\n                                    <small><span style=\"text-decoration: line-through;\">N</span>${costprice}.00</small>\r\n                                </td>\r\n                                <td>\r\n                                    <small><span style=\"text-decoration: line-through;\">N</span>${sellingprice}.00</small>\r\n                                </td>\r\n                                <td><small>${itemQuantity}</small></td>\r\n                                <td>\r\n                                    <small><span style=\"text-decoration: line-through;\">N</span>${amountMadeWithQt}.00</small>\r\n                                </td>\r\n                                <td>\r\n                                    <small><span style=\"text-decoration: line-through;\">N</span>${quantityAndCostPrice}.00</small>\r\n                                </td>\r\n                                <td>\r\n                                    <small><span style=\"text-decoration: line-through;\">N</span>${profitPerItemSoldWithQt}.00</small>\r\n                                </td>\r\n                                <td>\r\n                                    <small>\r\n                                        ${recieptCreatedOn}\r\n                                    </small>\r\n                                </td>\r\n                            </tr>\r\n                            `;\r\n\r\n                            // Grand Total\r\n                            let grandTotalWrapper = document.querySelectorAll('.grand_total');\r\n                            grandTotalWrapper.forEach(wrapper => {\r\n                                wrapper.innerHTML = amount.reduce((x,y) => x+y);\r\n                            });\r\n\r\n                            //Total Quantity of Product Sold\r\n                            let totalQTofSoldProductsWrappers = document.querySelectorAll('.totalQTofSoldProducts');\r\n                            totalQTofSoldProductsWrappers.forEach(wrapper => {\r\n                                wrapper.innerHTML = totalQTofSoldProducts.reduce((x,y) => x+y) + '.00';\r\n                            });\r\n                            \r\n                            //Total Profit Made//totalAmountofProfitMade\r\n                            let totalProfitMadeWrapper = document.querySelectorAll('.profit_total');\r\n                            totalProfitMadeWrapper.forEach(wrapper => {\r\n                                wrapper.innerHTML = totalAmountofProfitMade.reduce((x,y) => x+y,0);\r\n                            });\r\n\r\n\r\n                        };\r\n                    });\r\n\r\n                    cursor.continue();\r\n                }\r\n                \r\n                // callback(recieptCreatedOn, recieptNumber);\r\n            };\r\n            \r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //this.#processDateRangeOfSales(e.target);\r\n    #processDateRangeOfSales(date2Elem)\r\n    {\r\n        let date1 = document.querySelector('#date1');\r\n        if(!date1.value)\r\n            (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', 'Start Date is required!');\r\n        else if(!date2Elem.value)\r\n            (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', 'End Date is required!')\r\n        else\r\n        {\r\n            let startDate = new Date(date1.value).getTime();\r\n            let endDate = new Date(date2Elem.value).getTime();\r\n\r\n            if(endDate < startDate)\r\n                (0,_utils_src_toast_it__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', 'You should use correct date format');\r\n            else \r\n            {\r\n                \r\n                this.#getCartRecordDetailsFromDB(\r\n                    this.#objectStoreName, \r\n                    this.#indexName, \r\n                    startDate, \r\n                    endDate, \r\n                    this.#lowerOpen, \r\n                    this.#upperOpen);\r\n\r\n                //Add the range as title.\r\n                let fromDate = (0,_utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__.convertDateFromMilliSecToDateString)(startDate);\r\n                let toDate = (0,_utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__.convertDateFromMilliSecToDateString)(endDate);\r\n                let dateTitle = `${fromDate} to ${toDate}`;\r\n\r\n                //Insert it into every title element innerHTML\r\n                let dateTileElems = document.querySelectorAll('.date_title_elem');\r\n                dateTileElems.forEach(elem => {\r\n                    elem.innerHTML = `${dateTitle}`;\r\n                });\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    #addOtherContent(recieptDate, recieptNumber)\r\n    {\r\n        // console.log(output);\r\n        let d = new Date(recieptDate);\r\n        let recieptCreatedOn = (d.getDate()+ '-'+(d.getMonth()+1)+ '-'+d.getFullYear());\r\n\r\n        // console.log(recieptNumber);\r\n        document.querySelector('#reciept_id').innerHTML = recieptNumber;\r\n        document.querySelector('#reciept_date').innerHTML = recieptCreatedOn;\r\n        sessionStorage.setItem('reciept_id', recieptNumber);\r\n\r\n        //This date is used for when the reciept was currently printed ie the current date at which the reciept was printed or reprinted\r\n        let currentD = new Date();\r\n        let recieptPrintDate = (currentD.getDate()+ '-'+(currentD.getMonth()+1)+ '-'+currentD.getFullYear());\r\n        document.querySelector('#current_date').innerHTML = recieptPrintDate;\r\n        \r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/shop_src/checks_and_balances.js?");

/***/ }),

/***/ "./src/utils_src/date_4rm_milisec_to_humanReadable.js":
/*!************************************************************!*\
  !*** ./src/utils_src/date_4rm_milisec_to_humanReadable.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertDateFromMilliSecToDateString: () => (/* binding */ convertDateFromMilliSecToDateString)\n/* harmony export */ });\n/* harmony import */ var _month_names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./month_names.js */ \"./src/utils_src/month_names.js\");\n\r\nconst convertDateFromMilliSecToDateString = (value) => {\r\n    if(value)\r\n    {\r\n        console.log(value);\r\n        const ts = (value.seconds+value.nanoseconds/1000000000)*1000;\r\n\r\n        // nanoseconds\r\n        let dt = new Date(Number(ts));\r\n        let y = dt.getFullYear();\r\n        let m = _month_names_js__WEBPACK_IMPORTED_MODULE_0__.monthNames[dt.getMonth()];\r\n        let d = dt.getDate();\r\n        return `${d} ${m}, ${y}`;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/date_4rm_milisec_to_humanReadable.js?");

/***/ }),

/***/ "./src/utils_src/month_names.js":
/*!**************************************!*\
  !*** ./src/utils_src/month_names.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   monthNames: () => (/* binding */ monthNames)\n/* harmony export */ });\n\r\n\r\nconst monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/month_names.js?");

/***/ })

}]);