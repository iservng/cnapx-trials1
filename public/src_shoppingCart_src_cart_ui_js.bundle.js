"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcnapx_trials"] = self["webpackChunkcnapx_trials"] || []).push([["src_shoppingCart_src_cart_ui_js"],{

/***/ "./src/indexeddb_src/offlinedb.js":
/*!****************************************!*\
  !*** ./src/indexeddb_src/offlinedb.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfflineDB: () => (/* binding */ OfflineDB)\n/* harmony export */ });\n\r\n\r\n/**\r\n * The \"Offline\" database class is responsible for setting up the databases used for offline store POS calculations. The class class is loaded and executed after a user has onboard ie have registered in the application.\r\n */\r\nclass OfflineDB \r\n{\r\n\r\n    constructor() {}\r\n\r\n\r\n    /**\r\n     * This function as the public api of this class, when its called on the object-instance, the onupgradeneeded-event handler is what gets executed and also executes the callback.\r\n     * \r\n     * @param {string} callback \r\n     */\r\n    withDB(callback) \r\n    {\r\n        //Request v1 of the database\r\n        let openRequest = window.indexedDB.open('cnapx', 1);\r\n\r\n        //Log any error\r\n        openRequest.onerror = console.error;\r\n\r\n        //Or call this when done\r\n        openRequest.onsuccess = event => {\r\n            //The result of the request is the database.\r\n            let db = event.target.result;\r\n            //Invoke the callback with the database\r\n            callback(db);\r\n        };\r\n\r\n        /**\r\n         * If version 1 of the database does not yet exist, then this event handler will be triggered. This is used to create and initialize object-stores and indexes when the DB is first created or to modify then when we switch from one version of the database schema to the other.\r\n         */\r\n        openRequest.onupgradeneeded = event => {\r\n            let db = event.target.result;\r\n            this.#initdb(db, callback);\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 2. THE initdb(db, callback) FUNCTION\r\n     * -------------------------------------\r\n     * withDB() calls this function if the database has not been initialized yet. We set up the database, then pass the database to the callback function.\r\n     * \r\n     * Our cnapx database include object-store that holds objects like this\r\n     * {\r\n            zipcode: \"01234\",\r\n            city: \"Alston\",\r\n            state: \"MA\"\r\n        }\r\n    */\r\n\r\n    #initdb(db, callback) \r\n    {\r\n        /**\r\n         * Creates the object-store, specifying a name for the store and an options-object that include the key-path specifying the property name of the key field for this store.\r\n         */\r\n        // let products = db.createObjectStore('products', {keyPath: \"createdOn\"});\r\n        let products = db.createObjectStore('products', {autoIncrement: true});\r\n        products.createIndex('cost_price', 'cost_price', {unique:false});\r\n        products.createIndex('selling_price', 'selling_price', {unique:false});\r\n        products.createIndex('product_name', 'product_name', {unique:true});\r\n        products.createIndex('product_quantity', 'product_quantity', {unique:false});\r\n\r\n        let moneyIn = db.createObjectStore('money-in', {autoIncrement: true});\r\n        moneyIn.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let moneyOut = db.createObjectStore('money-out', {autoIncrement: true});\r\n        moneyOut.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n\r\n        /**\r\n         * CHECKS TODOS\r\n         * 1. Each products enter as sold into the cart must be entered with the selling price as at when the product was sold\r\n         * \r\n         */\r\n        let cart = db.createObjectStore('cart', {autoIncrement: true});\r\n        cart.createIndex('createdOn', 'createdOn', {unique:false});\r\n        cart.createIndex('transaction_id', 'transaction_id', {unique:false});\r\n\r\n        let marchant = db.createObjectStore('marchant', {autoIncrement: true});\r\n        marchant.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let customer = db.createObjectStore('customer', {autoIncrement: true});\r\n        customer.createIndex('createdOn', 'createdOn', {unique:true});\r\n        customer.createIndex('phone', 'phone', {unique:true});\r\n\r\n\r\n        let cnapxClient = db.createObjectStore('cnapxClient', {autoIncrement: true});\r\n        cnapxClient.createIndex('createdOn', 'createdOn', {unique:true});\r\n        cnapxClient.createIndex('phone', 'phone', {unique:true});\r\n\r\n        let dailyTransaction = db.createObjectStore('daily-transactions', {autoIncrement: true});\r\n        dailyTransaction.createIndex('createdOn', 'createdOn', {unique:true});\r\n        dailyTransaction.createIndex('transaction_id', 'transaction_id', {unique:true});\r\n        \r\n        \r\n        //Execute the callback\r\n        callback();\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // =========================================\r\n    \r\n    saveToDB(objectStoreName, callback, data) {\r\n        this.withDB(db => {\r\n            // Create a read-only transaction object for this\r\n            let transaction = db.transaction([objectStoreName], 'readwrite');\r\n\r\n            //Get the object-store from the transaction\r\n            let objectStore = transaction.objectStore(objectStoreName);\r\n            const request = objectStore.add(data);\r\n\r\n            request.onsuccess = (event) => {\r\n                let productId = event.target.result;\r\n                callback(productId);\r\n            };\r\n        \r\n        });\r\n    }\r\n    // =========================================\r\n\r\n    getTransactionDetailFromDB(objectStoreName, transactionId, indexName, callback) {\r\n        \r\n        \r\n    }\r\n    // =========================================\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/indexeddb_src/offlinedb.js?");

/***/ }),

/***/ "./src/shoppingCart_src/cart_ui.js":
/*!*****************************************!*\
  !*** ./src/shoppingCart_src/cart_ui.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CartUI: () => (/* binding */ CartUI)\n/* harmony export */ });\n/* harmony import */ var _utils_src_insert_into_DOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils_src/insert_into_DOM */ \"./src/utils_src/insert_into_DOM.js\");\n/* harmony import */ var _utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils_src/toast_it.js */ \"./src/utils_src/toast_it.js\");\n/* harmony import */ var _sample_data_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sample_data.js */ \"./src/shoppingCart_src/sample_data.js\");\n/* harmony import */ var _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../indexeddb_src/offlinedb.js */ \"./src/indexeddb_src/offlinedb.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass CartUI \r\n{\r\n    #_mErrors;\r\n    #mErrorMsg;\r\n    #basket;\r\n    #sampleProductData;\r\n    #offlinedb;\r\n    constructor()\r\n    {\r\n        this.#_mErrors = 0;\r\n        this.#mErrorMsg = '';\r\n        this.#offlinedb = new _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_3__.OfflineDB();\r\n        this.#sampleProductData = _sample_data_js__WEBPACK_IMPORTED_MODULE_2__.sampleProductData;\r\n        this.#basket = JSON.parse(localStorage.getItem('cartData')) || [];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //Class Public API\r\n    createUi()\r\n    {\r\n        if(this.#_mErrors === 0)\r\n        {\r\n            let content = `\r\n            <div class=\"container\">\r\n            <div class=\"row\" style=\"margin-top: 3rem;\">\r\n\r\n                <!-- USER-PROFILE-AVARTAR  -->\r\n                <div class=\"col s12\">\r\n                    \r\n                    <p>\r\n                        <a href=\"#\" class=\"back-to-shop\">\r\n                            &larr; Back to Shop\r\n                        </a>\r\n                    </p>\r\n                    <b>\r\n                        <a href=\"#\" class=\"sidenav-trigger purple-text text-darken-4\" data-target=\"mobile-demo\">\r\n                            menu\r\n                        </a>\r\n                    </b>\r\n                </div>\r\n\r\n\r\n                <!-- FIRST SECTION OF DASHBOARD  -->\r\n                <div class=\"col s12\" style=\"margin-bottom: 2rem; margin-top: 3rem;\">\r\n                    <div class=\"row\">\r\n\r\n                        <div class=\"col s12 m8 l8\">\r\n                            <div class=\"card-panel z-depth-0\">\r\n                                <span class=\"purple-text text-darken-3\">\r\n                                    <h5><b>Cart Invoice</b></h5>\r\n                                    <small>Ensure to check out on the right, select the mode of payment and continue</small>\r\n                                </span>\r\n                                <p>\r\n                                    \r\n                                </p>\r\n                            </div>\r\n                            <!-- ================= -->\r\n                            <ul class=\"collection\" id=\"cartItemHolder\">\r\n                                \r\n                            </ul>\r\n                                \r\n                            <!-- ================= -->\r\n                            <div class=\"card-panel lighten-5 z-depth-0\" style=\"border-bottom: 1px solid #f3e5f5;\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col s6\">\r\n                                        <b>Invoice Total:</b>\r\n                                    </div>\r\n                                    <div class=\"col s6 right-align\">\r\n                                        <b class=\"purple-text text-darken-3 grand_total\">\r\n                                            N 0.00\r\n                                        </b>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"col s12 m4 l4\" id=\"checkout\">\r\n                            <div class=\"card-panel z-depth-0\" style=\"border: 1px solid #f3e5f5;\">\r\n                            <form id=\"makePaymentForm\">\r\n                                <span class=\"purple-text text-darken-3\">\r\n                                    <p>\r\n                                        \r\n                                        <h5 class=\"purple-text\">CheckOut</h5>\r\n                                    </p>\r\n\r\n                                    <table>\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th>Name</th>\r\n                                            <th>Price</th>\r\n                                        </tr>\r\n                                        </thead>\r\n\r\n                                        <tbody>\r\n                                        <tr>\r\n                                            <td>Grand Total</td>\r\n                                            <td class=\"grand_total\">0.00</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>VAT</td>\r\n                                            <td><span style=\"text-decoration: line-through;\">N</span> 0.00</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Shipping</td>\r\n                                            <td><span style=\"text-decoration: line-through;\">N</span> 0.00</td>\r\n                                        </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n                                    <p>\r\n                                        <h6><small>Please selectpayment mode</small></h6>\r\n                                        <input type=\"hidden\" id=\"grandTotal\">\r\n                                        <label>\r\n                                            <input name=\"paymode\" type=\"radio\" value=\"cnapx\"/>\r\n                                            <span><small>Cnapx</small></span>\r\n                                        </label>\r\n                                        <label>\r\n                                            <input name=\"paymode\" type=\"radio\" value=\"pos\"/>\r\n                                            <span><small>POS</small></span>\r\n                                        </label>\r\n                                        <label>\r\n                                            <input name=\"paymode\" type=\"radio\" value=\"cash\"/>\r\n                                            <span><small>Cash</small></span>\r\n                                        </label>\r\n                                    </p>\r\n\r\n                                    <p>\r\n                                        <input type=\"submit\" class=\"btn green darken-3\" value=\"Make Payment\">\r\n                                    </p>\r\n                                </span>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>        \r\n                </div>\r\n\r\n                <div class=\"col s12 right-align\" style=\"margin-top: 6rem;\">\r\n                    <p>\r\n                        <div class=\"divider\"></div>\r\n                    </p>\r\n                    <small class=\"grey-text\">Powered by </small>\r\n                    <b class=\"purple-text text-darken-3\">\r\n                        iservng\r\n                    </b>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            `;\r\n            (0,_utils_src_insert_into_DOM__WEBPACK_IMPORTED_MODULE_0__.insertIntoDOM)('main', content);\r\n\r\n\r\n\r\n            //Register event handler for clear_cart\r\n            if(document.querySelector('.clear_cart'))\r\n            {\r\n                // document.querySelector('.clear_cart').addEventListener('click', e => {\r\n                //     e.preventDefault();\r\n                //     localStorage.removeItem('cartData');\r\n                //     import('../shoppingCart/shopping_cart_home_page.js')\r\n                //     .then(m => {\r\n                //         let shopHome = new m.ShoppingCartHomePage();\r\n                //         shopHome.createUi();\r\n                //     })\r\n                //     .catch(error => {\r\n                //         console.log(error.message);\r\n                //         toastIt('red', 'Unable to load the shop home');\r\n                //     });\r\n                // });\r\n            }\r\n\r\n            this.#generateCartUiItems();\r\n\r\n\r\n\r\n            //Register event handler for the makePaymentForm submission\r\n            if(document.querySelector('#makePaymentForm'))\r\n            {\r\n                document.querySelector('#makePaymentForm').addEventListener('submit', e => {\r\n                    e.preventDefault();\r\n                    this.#processMakePaymentForm(e.target);\r\n                });\r\n            }\r\n\r\n            // =======================\r\n            //Event handler for the back to shop btn\r\n            if(document.querySelector('.back-to-shop'))\r\n            {\r\n                let backBtn = document.querySelector('.back-to-shop');\r\n                backBtn.addEventListener('click', e => {\r\n                    e.preventDefault();\r\n                    __webpack_require__.e(/*! import() */ \"src_shoppingCart_src_shopping_cart_home_page_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./shopping_cart_home_page.js */ \"./src/shoppingCart_src/shopping_cart_home_page.js\"))\r\n                    .then(m => {\r\n                        let shop = new m.ShoppingCartHomePage();\r\n                        shop.createUi();\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error.message);\r\n                    })\r\n                })\r\n            }\r\n            // =======================\r\n            \r\n\r\n        }\r\n        else \r\n        {\r\n            (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', this.#mErrorMsg);\r\n            console.log(this.#mErrorMsg);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //UI utility function for manipulations\r\n    #generateCartUiItems()\r\n    {\r\n\r\n        if(this.#basket.length !== 0)\r\n        {\r\n            \r\n            if(document.querySelector('#cartItemHolder'))\r\n            {\r\n                let cartItemOutput = ``;\r\n                this.#basket.forEach(product => {\r\n                    let {id, item, key} = product;\r\n\r\n                    this.#offlinedb.withDB(db => {\r\n                        db.transaction(\"products\")\r\n                            .objectStore(\"products\")\r\n                            .get(key).onsuccess = (event) => {\r\n\r\n                                let cartProduct = event.target.result;\r\n                                let total = cartProduct.selling_price * item;\r\n\r\n                                cartItemOutput = `\r\n                                    <img src=${cartProduct.product_image} alt=\"\" class=\"circle\">\r\n                                    <span class=\"title\"><small><b class=\"grey-text text-darken-3\">${cartProduct.product_name}</b></small></span>\r\n                                    <p>\r\n                                        <small>\r\n                                            <b><span style=\"text-decoration: line-through;\">N</span> ${cartProduct.selling_price}.00</b>\r\n                                        </small> <br>\r\n\r\n                                        <a href=\"#\" id=${id}>\r\n                                            ${item}\r\n                                        </a>\r\n                                    </p>\r\n                                    \r\n                                    <a href=\"#!\" class=\"secondary-content\">\r\n                                        <i class=\"black-text\"><span style=\"text-decoration: line-through;\">N</span> ${total}.00</i>\r\n                                    </a>`;\r\n                                \r\n                                let wrapper = document.querySelector('#cartItemHolder');\r\n\r\n                                let li = document.createElement('li');\r\n                                li.setAttribute('class', \"collection-item avatar purple lighten-5\");\r\n\r\n                                li.innerHTML = cartItemOutput;\r\n\r\n                                wrapper.append(li);\r\n                                this.#cartGrandTotalForCheckout();\r\n\r\n                                // ========================\r\n                                if(document.querySelectorAll('.remove_item'))\r\n                                {\r\n                                    let removeItemBtns = document.querySelectorAll('.remove_item');\r\n                                    removeItemBtns.forEach(btn => {\r\n                                        btn.addEventListener('click', e => {\r\n                                            e.preventDefault();\r\n                                            this.#removeItemFromCart(e);\r\n                                        }, false);\r\n                                    });\r\n                                }\r\n                                // ========================\r\n                            };\r\n                    });\r\n                });\r\n\r\n                \r\n\r\n\r\n                \r\n                // =======================\r\n                // Increment\r\n                if(document.querySelectorAll('.increment'))\r\n                {\r\n                    let incrementBtns = document.querySelectorAll('.increment');\r\n                    incrementBtns.forEach(btn => {\r\n                        btn.addEventListener('click', e => {\r\n                            e.preventDefault();\r\n                            this.#incrementQuantity(e);\r\n                        }, false);\r\n                    });\r\n                }\r\n\r\n                //Register Event-Handlers for decrement and Increment\r\n                if(document.querySelectorAll('.decrement'))\r\n                {\r\n                    let decrementBtns = document.querySelectorAll('.decrement');\r\n                    decrementBtns.forEach(btn => {\r\n                        btn.addEventListener('click', e => {\r\n                            e.preventDefault();\r\n                            this.#decrimentQuantity(e);\r\n                        }, false);\r\n                    });\r\n                }\r\n                // =====================\r\n            }\r\n        }\r\n        else \r\n        {\r\n            // console.log(\"Basket Empty\");\r\n            if(document.querySelector('#cartItemHolder'))\r\n            {\r\n                document.querySelector('#cartItemHolder').innerHTML = `\r\n                    <li class=\"collection-item avatar\">\r\n                        <div class=\"center-align\">\r\n                            <p>Your cart is empty</p>\r\n                            <p style=\"margin-top: 2rem;\">\r\n                                <a href=\"#\" class=\"btn-small purple shop_front\">Back to shop</a>\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                `;\r\n\r\n                //Register event hander for shop_front\r\n                if(document.querySelector('.shop_front'))\r\n                {\r\n                    document.querySelector('.shop_front').addEventListener('click', e => {\r\n                        e.preventDefault();\r\n                        __webpack_require__.e(/*! import() */ \"src_shoppingCart_src_shopping_cart_home_page_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../shoppingCart_src/shopping_cart_home_page.js */ \"./src/shoppingCart_src/shopping_cart_home_page.js\"))\r\n                        .then(m => {\r\n                            let shopfront = new m.ShoppingCartHomePage();\r\n                            shopfront.createUi();\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error.message);\r\n                            (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', 'Unable to load the shop front');\r\n                        });\r\n                    });\r\n                }\r\n\r\n            }\r\n\r\n            if(document.querySelector('#checkout'))\r\n            {\r\n                document.querySelector('#checkout').innerHTML = `\r\n                    <div class=\"card-panel z-depth-0\" style=\"border: 1px solid #f3e5f5;\">\r\n                        <span class=\"purple-text text-darken-3\">\r\n                            <p><b>CheckOut</b></p>\r\n                        </span>\r\n                    </div>\r\n                `;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    #processMakePaymentForm(form)\r\n    {\r\n        __webpack_require__.e(/*! import() */ \"src_shop_src_process_make_payment_form_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../shop_src/process_make_payment_form.js */ \"./src/shop_src/process_make_payment_form.js\"))\r\n        .then(m => {\r\n            let paymentProccessor = new m.ProcessMakePaymentForm(form);\r\n            paymentProccessor.validatePayment();\r\n        })\r\n        .catch(error => {\r\n            console.log(error.message);\r\n            (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_1__.toastIt)('red', 'Unable to load the payment processor');\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    // =====================================\r\n    #incrementQuantity(e)\r\n    {\r\n        e.preventDefault();\r\n        let id = Number(e.target.dataset.incrementid);\r\n        let selling_price = Number(e.target.dataset.sellingprice);\r\n        let realkey = Number(e.target.dataset.incrementidkey);\r\n        let cost_price = Number(e.target.dataset.costprice);\r\n\r\n        let search = this.#basket.find((x) => x.id === id);\r\n        if(search === undefined)\r\n            this.#basket.push({\r\n                        id: id, \r\n                        item: 1,\r\n                        key: realkey,\r\n                        selling_price: selling_price,\r\n                        cost_price: cost_price\r\n                    });\r\n        else\r\n            search.item += 1;\r\n\r\n        this.#generateCartUiItems();\r\n        this.#updateQuantity(id);\r\n        localStorage.setItem('cartData', JSON.stringify(this.#basket));\r\n        this.#cartGrandTotalForCheckout();\r\n    }\r\n\r\n    #decrimentQuantity(e)\r\n    {\r\n        e.preventDefault();\r\n        let id = (e.target.dataset.decrementid);\r\n\r\n        let search = this.#basket.find((x) => x.id === id);\r\n        if(search === undefined || search.item === 0)\r\n            return;\r\n        else \r\n            search.item -= 1;\r\n\r\n        this.#updateQuantity(id);\r\n        this.#basket = this.#basket.filter(product => product.item !== 0);\r\n        this.#generateCartUiItems();\r\n        localStorage.setItem('cartData', JSON.stringify(this.#basket));\r\n        this.#cartGrandTotalForCheckout();\r\n        \r\n    }\r\n\r\n    #updateQuantity(id)\r\n    {\r\n        let search = this.#basket.find(x => x.id === id);\r\n        document.getElementById(id).innerHTML = search.item;\r\n        this.#cartTotal();\r\n    }\r\n\r\n\r\n    #cartTotal()\r\n    {\r\n        \r\n        if(document.querySelectorAll('.cartAmount'))\r\n        {\r\n            let cartAmountTags = document.querySelectorAll('.cartAmount');\r\n            cartAmountTags.forEach(elem => {\r\n                elem.innerHTML = this.#basket.map((product) => product.item).reduce((x,y) => x+y,0);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    #removeItemFromCart = (e) => {\r\n\r\n        console.log(e.target);\r\n    }\r\n\r\n    #cartGrandTotalForCheckout = () => {\r\n        if(this.#basket.length !== 0)\r\n        {\r\n            \r\n            let amount = 0;\r\n            this.#basket.forEach((product) => {\r\n                let {id, item, key} = product;\r\n\r\n                \r\n                this.#offlinedb.withDB(db => {\r\n                    db.transaction('products')\r\n                        .objectStore('products')\r\n                        .get(key).onsuccess = (event) => {\r\n\r\n                            let product = event.target.result;\r\n                            amount += product.selling_price * item;\r\n\r\n                            let grandTotals = document.querySelectorAll('.grand_total');\r\n                            grandTotals.forEach(grand_total => {\r\n                                grand_total.innerHTML = `<span style=\"text-decoration: line-through;\">N</span> ${amount}.00`;\r\n                            });\r\n                            document.querySelector('#grandTotal').value = amount;\r\n                        };\r\n                });\r\n\r\n            });\r\n\r\n        }\r\n        else \r\n        {\r\n            return;\r\n        }\r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/shoppingCart_src/cart_ui.js?");

/***/ }),

/***/ "./src/shoppingCart_src/sample_data.js":
/*!*********************************************!*\
  !*** ./src/shoppingCart_src/sample_data.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sampleProductData: () => (/* binding */ sampleProductData)\n/* harmony export */ });\nvar sampleProductData = [\r\n    {\r\n        id: 'gfu',\r\n        name: 'Cool Product',\r\n        price: 349,\r\n        img: './images/cart-images/img-1.jpg'\r\n    },\r\n    {\r\n        id: 'dki',\r\n        name: 'Jamming Fresh',\r\n        price: 959,\r\n        img: './images/cart-images/img-2.jpg'\r\n    },\r\n    {\r\n        id: 'bhf',\r\n        name: 'Swiss Boy',\r\n        price: 739,\r\n        img: './images/cart-images/img-3.jpg'\r\n    },\r\n    {\r\n        id: 'eoa',\r\n        name: 'Tom Bracket',\r\n        price: 237,\r\n        img: './images/cart-images/img-4.jpg'\r\n    },\r\n    \r\n];\r\n\r\n//\n\n//# sourceURL=webpack://cnapx-trials/./src/shoppingCart_src/sample_data.js?");

/***/ })

}]);