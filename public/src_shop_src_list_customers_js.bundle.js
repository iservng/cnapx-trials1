"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcnapx_trials"] = self["webpackChunkcnapx_trials"] || []).push([["src_shop_src_list_customers_js"],{

/***/ "./src/indexeddb_src/offlinedb.js":
/*!****************************************!*\
  !*** ./src/indexeddb_src/offlinedb.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OfflineDB: () => (/* binding */ OfflineDB)\n/* harmony export */ });\n\r\n\r\n/**\r\n * The \"Offline\" database class is responsible for setting up the databases used for offline store POS calculations. The class class is loaded and executed after a user has onboard ie have registered in the application.\r\n */\r\nclass OfflineDB \r\n{\r\n\r\n    constructor() {}\r\n\r\n\r\n    /**\r\n     * This function as the public api of this class, when its called on the object-instance, the onupgradeneeded-event handler is what gets executed and also executes the callback.\r\n     * \r\n     * @param {string} callback \r\n     */\r\n    withDB(callback) \r\n    {\r\n        //Request v1 of the database\r\n        let openRequest = window.indexedDB.open('cnapx', 1);\r\n\r\n        //Log any error\r\n        openRequest.onerror = console.error;\r\n\r\n        //Or call this when done\r\n        openRequest.onsuccess = event => {\r\n            //The result of the request is the database.\r\n            let db = event.target.result;\r\n            //Invoke the callback with the database\r\n            callback(db);\r\n        };\r\n\r\n        /**\r\n         * If version 1 of the database does not yet exist, then this event handler will be triggered. This is used to create and initialize object-stores and indexes when the DB is first created or to modify then when we switch from one version of the database schema to the other.\r\n         */\r\n        openRequest.onupgradeneeded = event => {\r\n            let db = event.target.result;\r\n            this.#initdb(db, callback);\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 2. THE initdb(db, callback) FUNCTION\r\n     * -------------------------------------\r\n     * withDB() calls this function if the database has not been initialized yet. We set up the database, then pass the database to the callback function.\r\n     * \r\n     * Our cnapx database include object-store that holds objects like this\r\n     * {\r\n            zipcode: \"01234\",\r\n            city: \"Alston\",\r\n            state: \"MA\"\r\n        }\r\n    */\r\n\r\n    #initdb(db, callback) \r\n    {\r\n        /**\r\n         * Creates the object-store, specifying a name for the store and an options-object that include the key-path specifying the property name of the key field for this store.\r\n         */\r\n        // let products = db.createObjectStore('products', {keyPath: \"createdOn\"});\r\n        let products = db.createObjectStore('products', {autoIncrement: true});\r\n        products.createIndex('cost_price', 'cost_price', {unique:false});\r\n        products.createIndex('selling_price', 'selling_price', {unique:false});\r\n        products.createIndex('product_name', 'product_name', {unique:true});\r\n        products.createIndex('product_quantity', 'product_quantity', {unique:false});\r\n\r\n        let moneyIn = db.createObjectStore('money-in', {autoIncrement: true});\r\n        moneyIn.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let moneyOut = db.createObjectStore('money-out', {autoIncrement: true});\r\n        moneyOut.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n\r\n        /**\r\n         * CHECKS TODOS\r\n         * 1. Each products enter as sold into the cart must be entered with the selling price as at when the product was sold\r\n         * \r\n         */\r\n        let cart = db.createObjectStore('cart', {autoIncrement: true});\r\n        cart.createIndex('createdOn', 'createdOn', {unique:false});\r\n        cart.createIndex('transaction_id', 'transaction_id', {unique:false});\r\n\r\n        let marchant = db.createObjectStore('marchant', {autoIncrement: true});\r\n        marchant.createIndex('createdOn', 'createdOn', {unique:true});\r\n\r\n        let customer = db.createObjectStore('customer', {autoIncrement: true});\r\n        customer.createIndex('createdOn', 'createdOn', {unique:true});\r\n        customer.createIndex('phone', 'phone', {unique:true});\r\n\r\n\r\n        let cnapxClient = db.createObjectStore('cnapxClient', {autoIncrement: true});\r\n        cnapxClient.createIndex('createdOn', 'createdOn', {unique:true});\r\n        cnapxClient.createIndex('phone', 'phone', {unique:true});\r\n\r\n        let dailyTransaction = db.createObjectStore('daily-transactions', {autoIncrement: true});\r\n        dailyTransaction.createIndex('createdOn', 'createdOn', {unique:true});\r\n        dailyTransaction.createIndex('transaction_id', 'transaction_id', {unique:true});\r\n        \r\n        \r\n        //Execute the callback\r\n        callback();\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // =========================================\r\n    \r\n    saveToDB(objectStoreName, callback, data) {\r\n        this.withDB(db => {\r\n            // Create a read-only transaction object for this\r\n            let transaction = db.transaction([objectStoreName], 'readwrite');\r\n\r\n            //Get the object-store from the transaction\r\n            let objectStore = transaction.objectStore(objectStoreName);\r\n            const request = objectStore.add(data);\r\n\r\n            request.onsuccess = (event) => {\r\n                let productId = event.target.result;\r\n                callback(productId);\r\n            };\r\n        \r\n        });\r\n    }\r\n    // =========================================\r\n\r\n    getTransactionDetailFromDB(objectStoreName, transactionId, indexName, callback) {\r\n        \r\n        \r\n    }\r\n    // =========================================\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/indexeddb_src/offlinedb.js?");

/***/ }),

/***/ "./src/shop_src/list_customers.js":
/*!****************************************!*\
  !*** ./src/shop_src/list_customers.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListCustomers: () => (/* binding */ ListCustomers)\n/* harmony export */ });\n/* harmony import */ var _utils_src_insert_into_DOM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils_src/insert_into_DOM.js */ \"./src/utils_src/insert_into_DOM.js\");\n/* harmony import */ var _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../indexeddb_src/offlinedb.js */ \"./src/indexeddb_src/offlinedb.js\");\n/* harmony import */ var _utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils_src/toast_it.js */ \"./src/utils_src/toast_it.js\");\n/* harmony import */ var _utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils_src/date_4rm_milisec_to_humanReadable.js */ \"./src/utils_src/date_4rm_milisec_to_humanReadable.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass ListCustomers\r\n{\r\n    #_mErrors;\r\n    #mErrorMsg;\r\n    #offlinedb;\r\n    constructor()\r\n    {\r\n        this.#_mErrors = 0;\r\n        this.#mErrorMsg = ``;\r\n        this.#offlinedb = new _indexeddb_src_offlinedb_js__WEBPACK_IMPORTED_MODULE_1__.OfflineDB();\r\n    }\r\n\r\n    createUi()\r\n    {\r\n        if(this.#_mErrors == 0)\r\n        {\r\n            let content = `\r\n            <div class=\"container\">\r\n                <div class=\"row\" style=\"margin-top: 3rem;\">\r\n                    <div class=\"col s12\">\r\n                        <h4 class=\"purple-text center-align\">My Customers</h4>\r\n                        <b class=\"hide-on-small-only\">\r\n                            <a href=\"#\" class=\"btn-small purple z-depth-0 sidenav-trigger white-text text-darken-4\" data-target=\"mobile-demo\">\r\n                                Menu\r\n                            </a>\r\n                        </b>\r\n                    </div>\r\n\r\n                    <div class=\"col s12\">\r\n                        \r\n                        <p>\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Phone</th>\r\n                                        <th>Address</th>\r\n                                        <th>Date</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody id=\"customer_list_records\">\r\n                                    <tr>\r\n                                        <td>Bangis Inc</td>\r\n                                        <td>09012389812</td>\r\n                                        <td>Ahmadu Bello Way Katsina</td>\r\n                                        <td>14 Fed, 2024</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div class=\"col s12 m6 l6\"></div>\r\n                    <div class=\"col s12 m6 l6\"></div>\r\n                </div>\r\n\r\n                <div class=\"row\" style=\"margin-top: 4rem;\">\r\n                    <div class=\"col s12\">\r\n                        <small>Powered by </small><b class=\"purple-text\">iservng</b>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            `;\r\n            (0,_utils_src_insert_into_DOM_js__WEBPACK_IMPORTED_MODULE_0__.insertIntoDOM)('main', content);\r\n\r\n            //Call the utility function that loads the customer list\r\n            this.#loadCustomers();\r\n\r\n        }\r\n        else \r\n        {\r\n            (0,_utils_src_toast_it_js__WEBPACK_IMPORTED_MODULE_2__.toastIt)('red', this.#mErrorMsg);\r\n            console.log(this.#mErrorMsg);\r\n        }\r\n    }\r\n\r\n\r\n    #loadCustomers()\r\n    {\r\n        document.querySelector('#customer_list_records').innerHTML = ``;\r\n\r\n        this.#offlinedb.withDB(db => {\r\n            let transaction = db.transaction('customer');\r\n            let objectStore = transaction.objectStore('customer');\r\n            objectStore.openCursor().onsuccess = event => {\r\n                let cursor = event.target.result;\r\n                if(cursor)\r\n                {\r\n                    let createdOn = (0,_utils_src_date_4rm_milisec_to_humanReadable_js__WEBPACK_IMPORTED_MODULE_3__.convertDateFromMilliSecToDateString)(cursor.value.createdOn);\r\n                    document.querySelector('#customer_list_records').innerHTML += `\r\n                    <tr>\r\n                        <td>${cursor.value.name}</td>\r\n                        <td>${cursor.value.phone}</td>\r\n                        <td>${cursor.value.address}</td>\r\n                        <td>${createdOn}</td>\r\n                    </tr>\r\n                    `;\r\n                    cursor.continue();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/shop_src/list_customers.js?");

/***/ }),

/***/ "./src/utils_src/date_4rm_milisec_to_humanReadable.js":
/*!************************************************************!*\
  !*** ./src/utils_src/date_4rm_milisec_to_humanReadable.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertDateFromMilliSecToDateString: () => (/* binding */ convertDateFromMilliSecToDateString)\n/* harmony export */ });\n/* harmony import */ var _month_names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./month_names.js */ \"./src/utils_src/month_names.js\");\n\r\nconst convertDateFromMilliSecToDateString = (value) => {\r\n    if(value)\r\n    {\r\n        console.log(value);\r\n        const ts = (value.seconds+value.nanoseconds/1000000000)*1000;\r\n\r\n        // nanoseconds\r\n        let dt = new Date(Number(ts));\r\n        let y = dt.getFullYear();\r\n        let m = _month_names_js__WEBPACK_IMPORTED_MODULE_0__.monthNames[dt.getMonth()];\r\n        let d = dt.getDate();\r\n        return `${d} ${m}, ${y}`;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/date_4rm_milisec_to_humanReadable.js?");

/***/ }),

/***/ "./src/utils_src/month_names.js":
/*!**************************************!*\
  !*** ./src/utils_src/month_names.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   monthNames: () => (/* binding */ monthNames)\n/* harmony export */ });\n\r\n\r\nconst monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\n\r\n\n\n//# sourceURL=webpack://cnapx-trials/./src/utils_src/month_names.js?");

/***/ })

}]);